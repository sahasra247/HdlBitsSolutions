module top_module(
    input clk,
    input areset,    // Freshly brainwashed Lemmings walk left.
    input bump_left,
    input bump_right,
    input ground,
    input dig,
    output walk_left,
    output walk_right,
    output aaah,
    output digging ); 
    reg [2:0] state,next_state;
    parameter left=3'd0,right=3'd1,fall_l=3'd2,fall_r=3'd3,dig_l=3'd4,dig_r=3'd5;
    always @(*) begin
        case(state)
            left:begin
                case({ground,dig})
                    2'b00:next_state=fall_l;
                    2'b01:next_state=fall_l;
                    2'b10:next_state=(bump_left)?right:left;
                    2'b11:next_state=dig_l;
                endcase
            end
            right:begin
                case({ground,dig})
                    2'b00:next_state=fall_r;
                    2'b01:next_state=fall_r;
                    2'b10:next_state=(bump_right)?left:right;
                    2'b11:next_state=dig_r;
                endcase
            end
            fall_l:next_state=(ground)?left:fall_l;
            fall_r:next_state=(ground)?right:fall_r;
            dig_l:next_state=(ground)?dig_l:fall_l;
            dig_r:next_state=(ground)?dig_r:fall_r;
        endcase
    end
    
    always @(posedge clk,posedge areset) begin
        if(areset) state<=left;
        else state<=next_state;
    end
    
    assign walk_left=(state==left);
    assign walk_right=(state==right);
    assign aaah=((state==(fall_l))|(state==(fall_r)));
    assign digging=((state==(dig_l))|(state==(dig_r)));
                
            
                
            

endmodule
