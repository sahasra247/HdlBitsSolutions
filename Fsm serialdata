module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
); //
    reg [3:0] state;
    reg [3:0] next_state;
    
    parameter s0=4'd0,s1=4'd1,s2=4'd2,s3=4'd3,s4=4'd4,s5=4'd5,s6=4'd6,s7=4'd7,s8=4'd8,s9=4'd9,s10=4'd10,s11=4'd11;
    
    always @(*) begin
        case(state) 
            s0:next_state=(!in)?s1:s0;//reset state
            s1:next_state=s2;//1
            s2:next_state=s3;//1
            s3:next_state=s4;//3
            s4:next_state=s5;//4
            s5:next_state=s6;//5
            s6:next_state=s7;//6
            s7:next_state=s8;//7
            s8:next_state=s9;//8
            s9:next_state=(in)?s10:s11;//gayy state
            s10:next_state=(in)?s0:s1;//done (final state)
            s11:next_state=(in)?s0:s11;//wait (resert only after stop bit)
            
        endcase
    end
    
    always @(posedge clk) begin
        if(reset) begin
            state<=s0;
        end
        else begin
            state<=next_state;
            case(state)
                s1:out_byte[0]<=in;
                s2:out_byte[1]<=in;
                s3:out_byte[2]<=in;
                s4:out_byte[3]<=in;
                s5:out_byte[4]<=in;
                s6:out_byte[5]<=in;
                s7:out_byte[6]<=in;
                s8:out_byte[7]<=in;
            endcase   
        end
    end
    assign done=(state==s10);
            

    // Use FSM from Fsm_serial

    // New: Datapath to latch input bits.

endmodule
